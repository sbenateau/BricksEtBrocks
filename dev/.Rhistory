# initial perturbation
x = c(0, rep(PerturbationTime[1], 2))
y = c(rep(initialY, 2), initialY - perturbationIntensity)
# calculation of the shortest distance
maxDistanceYRecover = initialY - y[length(y)]
i = 1
# Parameters
#----------------------
initialY = 1
maxY = 1
resistance = 0.5
resilience = 0.5
perturbationIntensity = 0.5
PerturbationTime = c(1,2)
# calculation (TODO alow multiple perturbation intensity)
# ----------------------------------
# new parameters
resultOfPerturbation = perturbationIntensity / resistance
angle = pi/3
# initial perturbation
x = c(0, rep(PerturbationTime[1], 2))
x
y = c(rep(initialY, 2), initialY - perturbationIntensity)
y
# Résistance and resilience vs perturbation
# Parameters
#----------------------
initialY = 1
maxY = 1
resistance = 0.5
resilience = 0.5
perturbationIntensity = 0.5
PerturbationTime = c(1,2)
# calculation (TODO alow multiple perturbation intensity)
# ----------------------------------
# new parameters
resultOfPerturbation = perturbationIntensity / resistance
angle = pi/3
# initial perturbation
x = c(0, rep(PerturbationTime[1], 2))
y = c(rep(initialY, 2), initialY - perturbationIntensity)
maxDistanceYRecover
# Résistance and resilience vs perturbation
# Parameters
#----------------------
initialY = 1
maxY = 1
resistance = 0.5
resilience = 0.5
perturbationIntensity = 0.5
PerturbationTime = c(1,2)
# calculation (TODO alow multiple perturbation intensity)
# ----------------------------------
# new parameters
resultOfPerturbation = perturbationIntensity / resistance
angle = pi/3
# initial perturbation
x = c(0, rep(PerturbationTime[1], 2))
y = c(rep(initialY, 2), initialY - perturbationIntensity)
# apply perturbation
for (i in 1:length(perturbation)){
# calculation of the shortest distance to recover
maxDistanceYRecover = initialY - y[length(y)]
maxDistanceXRecover = tan(angle) * maxDistanceYRecover
# check if last perturbation
if (i != length(PerturbationTime)){
# check if perturbation occurs before recovery
distanceX = PerturbationTime[i + 1] - PerturbationTime[i]
distanceYNextPerturbation = y[length(y)] + distanceX / tan(angle)
if (distanceYNextPerturbation < maxDistanceYRecover){
x = c(x, x[length(x)] + distanceX)
y = c(y,  distanceYNextPerturbation)
}
} else {
# if last perturbation
x = c(x, x[length(x)] + maxDistanceXRecover)
y = c(y,initialY)
}
}
# add a little time
if (y[length(y)] == initialY){
y = c(y, initialY)
x = c(x, x[length(x)] + 1)
}
plot(x,y, type = "l", axes = FALSE, ann = FALSE, asp = 1, ylim = c(0, 1))
x
y
i = 1
# calculation of the shortest distance to recover
maxDistanceYRecover = initialY - y[length(y)]
maxDistanceYRecover
maxDistanceXRecover = tan(angle) * maxDistanceYRecover
maxDistanceXRecover
i != length(PerturbationTime)
# check if perturbation occurs before recovery
distanceX = PerturbationTime[i + 1] - PerturbationTime[i]
distanceYNextPerturbation = y[length(y)] + distanceX / tan(angle)
distanceX
distanceYNextPerturbation
#build data frame with temperature and precipitation data
df <- as.data.frame(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
colnames(df) <- c("month")
df$month <- factor(df$month, levels = month.abb)
df$celsius <- c(-26.0, -24.5, -18.9, -9.8, -1.0, 7.0, 12.7, 12.3, 6.4, -1.2, -12.7, -21.9)
df$prec_mm <- c(18.7, 16.6, 18.1, 23.6, 30.0, 44.2, 59.8, 69.4, 69.9, 48.4, 35.5, 18.4)
#plot with ggplot2
library(ggplot2)
ggplot(data = df, mapping = aes(x = month, y = celsius, group = 1)) +
geom_bar(mapping = aes(y = prec_mm/2), stat = "identity", color="blue", fill="blue", width = 0.5) +
geom_line(color="red", size=1.5) +
scale_y_continuous("Temperature [°C]",
sec.axis = sec_axis(~ . *2, name = "Precipitation [mm]")
)
ggplot = NULL
plotToPlot = NULL
plotToPlot = ggplot(data = df)
plotToPlot = plotToPlot + geom_bar(mapping = aes(y = prec_mm/2), stat = "identity", color="blue", fill="blue", width = 0.5)
plotToPlot
plotToPlot = plotToPlot + geom_bar(mapping = aes(x= month,y = prec_mm/2), stat = "identity", color="blue", fill="blue", width = 0.5)
plotToPlot
plotToPlot = ggplot(data = df)
plotToPlot = plotToPlot + geom_bar(mapping = aes(x= month,y = prec_mm/2), stat = "identity", color="blue", fill="blue", width = 0.5)
plotToPlot
interPlot = geom_bar(mapping = aes(x= month,y = prec_mm/2), stat = "identity", color="blue", fill="blue", width = 0.5)
plotToPlot = ggplot(data = df)
interPlot = geom_bar(mapping = aes(x= month,y = prec_mm/2), stat = "identity", color="blue", fill="blue", width = 0.5)
plotToPlot = plotToPlot + interPlot
plotToPlot
plotToPlot = ggplot(data = df)
interPlot = geom_bar(mapping = aes(x= month,y = prec_mm/2), stat = "identity", color="red", fill="blue", width = 0.5)
plotToPlot = plotToPlot + interPlot
plotToPlot
#build data frame with temperature and precipitation data
df <- as.data.frame(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
colnames(df) <- c("month")
df$month <- factor(df$month, levels = month.abb)
df$celsius <- c(-26.0, -24.5, -18.9, -9.8, -1.0, 7.0, 12.7, 12.3, 6.4, -1.2, -12.7, -21.9)
df$prec_mm <- c(18.7, 16.6, 18.1, 23.6, 30.0, 44.2, 59.8, 69.4, 69.9, 48.4, 35.5, 18.4)
#plot with ggplot2
library(ggplot2)
library(ggplot2)
library(data.table)
input <- fread('/home/simon/GitHub/Galaxy-Bricks/tools/test-data/irisPlus.tabular')
names(input)[$xplot] <- "xcol"
names(input)[$yplot] <- "ycol"
xplot = 1
yplot = 2
plot_out = ggplot(data = input,
aes_string(x = names(input)[xplot], y = names(input)[yplot]))
plot_inter = geom_point()
plot_out = plot_out + plot_inter
plot_out
plot_out = ggplot(data = input,
aes_string(x = names(input)[xplot], y = names(input)[yplot]))
plot_inter = geom_point()
plot_out = plot_out + plot_inter
xplot = 1
yplot = 3
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot]))
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot])
plot_out = ggplot(data = input,
aes_string(mapping))
plot_inter = geom_point()
plot_out = plot_out + plot_inter
y = seq(-30, 100, length.out = 10)
x = 1:10
y = seq(-30, 100, length.out = 10)
range(x)
diff(range(x))
diff(range(x))
diff(range(y))
range = diff(range(y)) / diff(range(x))
rangeRatio = diff(range(y)) / diff(range(x))
x = 1:10
y = seq(-30, 100, length.out = 10)
rangeRatio = diff(range(y)) / diff(range(x))
rangeRatio = diff(range(y)) / diff(range(x))
rangeRatio
rangeRatio = diff(range(y)) / diff(range(x))
y / rangeRatio
y
yReduction = y / rangeRatio
yReduction
range(yReduction)
range(yReduction)
diff(range(yReduction))
mean(y)-mean(x)
mean(yReduction)-mean(x)
yReduction - (mean(yReduction)-mean(x))
input <- fread('/home/simon/GitHub/Galaxy-Bricks/tools/test-data/irisPlus.tabular')
names(input)[$xplot] <- "xcol"
input[, names(input)[$xplot]]
input[, names(input)[xplot]]
input[, nxplot]
input[, xplot]
input[, ..xplot]
range(input[, ..xplot])
range(input[, ..2])
input
input <- data.frame(input)
input
main.y = input[ , $main.yplot]
main.y = input[ , 2]
main.y = input[ , 2]
secondary.y = input[ , 3]
rangeRatio = diff(range(secondary.y)) / diff(range(main.y))
yReduction = secondary.y / rangeRatio
yNormalized = yReduction - (mean(yReduction)-mean(main.y))
input[ ,  3] <- yNormalized
input
names(input)
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = Species)
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_inter = geom_point(mapping)
plot_out = plot_out + plot_inter
plot_out
plot_out = ggplot(data = input,
aes_string(mapping))
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_out = ggplot(data = input,
aes_string(mapping))
plot_inter = geom_point(mapping)
plot_inter
plot_out = ggplot(data = input,
aes_string(mapping))
plot_out = plot_out + plot_inter
geom_b
plot_out
plot_inter = geom_point(mapping, colour = blue)
plot_out = plot_out + plot_inter
plot_out
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
xplot = 1
yplot = 3
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_out = ggplot(data = input,
aes_string(mapping))
plot_inter = geom_point(mapping, colour = blue)
plot_out = plot_out + plot_inter
plot_out
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
library(ggplot2)
library(data.table)
input <- fread('/home/simon/GitHub/Galaxy-Bricks/tools/test-data/irisPlus.tabular')
input[, ..xplot]
names(input)[$xplot] <- "xcol"
names(input)[$yplot] <- "ycol"
xplot = 1
yplot = 3
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_out = ggplot(data = input,
aes_string(mapping))
plot_inter = geom_point(mapping, colour = blue)
plot_out = plot_out + plot_inter
plot_out
plot_inter = geom_point(mapping, colour = blue)
plot_inter = geom_point(mapping, colour = "blue")
plot_out = plot_out + plot_inter
plot_out
plot_inter = geom_point(mapping)
plot_out = plot_out + plot_inter
plot_out
mapping
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_out = ggplot(data = input,
mapping)
plot_inter = geom_point(mapping)
plot_out = plot_out + plot_inter
plot_out
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_out = ggplot(data = input,
mapping)
plot_inter = geom_point()
plot_out = plot_out + plot_inter
plot_out
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_out = ggplot(data = input,
mapping)
plot_inter = geom_point(colour = 'blue')
plot_out = plot_out + plot_inter
plot_out
plot_out = ggplot(data = input)
col = 5
mappinGroup = aes_string(colour = names(input)[col])
plot_out = ggplot(data = input)
mappingCoord =  aes_string(x = names(input)[xplot], y = names(input)[yplot])
mappinGroup = aes_string(colour = names(input)[col])
plot_out + mappingCoord + mappinGroup + geom_point()
mapping <- aes_string(x = names(input)[xplot], y = names(input)[yplot], colour = "Species")
plot_out = ggplot(data = input)
plot_out = ggplot(data = input)
mappingCoord =  aes_string(x = names(input)[xplot], y = names(input)[yplot])
mappinGroup = aes_string(colour = names(input)[col])
plot_out = plot_out + mappingCoord + mappinGroup + geom_point()
plot_out
mappinGroup = aes_string(colour = names(input)[col])
mappingGroup = facet_wrap(names(input)[col])
mappingGroup = aes_string(colour = names(input)[col])
plot_out = ggplot(data = input)
mappingCoord =  aes_string(x = names(input)[xplot], y = names(input)[yplot])
mappingGroup = aes_string(colour = names(input)[col])
plot_out = plot_out + mappingCoord + mappinGroup + geom_point()
plot_out
mappingGroup = facet_wrap(names(input)[col])
plot_out = plot_out + mappingGroup
plot_out
inputData = "/home/simon/GitHub/Galaxy-Bricks/tools/test-data/irisPlus.tabular"
inputFormula = "c1+c2"
inputName = "hahahaha"
evalFormula <- inputFormula
functions <- c("log[(]" ,"exp[(]" ,"sqrt[(]" ,"asin[(]" ,"acos[(]" ,"sin[(]" ,"tan[(]" ,"atan[(]" ,"cos[(]", "sum[()]")
for (i in seq_along(functions)) evalFormula <- gsub(functions[i],"",evalFormula)
resultEval <- grepl("^[0-9 c+^/*%() -- -]+$",evalFormula)
resultEval
if (resultEval){
if (inputName == "") inputName = inputFormula
# change column names to column code to match formula syntax
transformedData <- inputData
colnames(transformedData) <- c(paste0("c",1:ncol(inputData)))
# change the formula
formulaIndexed <- gsub("c", "transformedData$c",inputFormula)
# apply formula to the data
resultData <- data.frame(eval(parse(text=formulaIndexed)))
# change the name of the result column
colnames(resultData) <- inputName
# add column to original file if asked
if (args[4] == TRUE) resultData <- data.frame(inputData, resultData)
# write output file
fwrite(resultData, file = "result.tabular", sep = "\t")
} else {
print("Formula not valid")
}
inputData
inputData = fread("/home/simon/GitHub/Galaxy-Bricks/tools/test-data/irisPlus.tabular")
inputFormula = "c1+c2"
library(data.table)
inputData = fread("/home/simon/GitHub/Galaxy-Bricks/tools/test-data/irisPlus.tabular")
inputFormula = "c1+c2"
inputName = "hahahaha"
evalFormula <- inputFormula
functions <- c("log[(]" ,"exp[(]" ,"sqrt[(]" ,"asin[(]" ,"acos[(]" ,"sin[(]" ,"tan[(]" ,"atan[(]" ,"cos[(]", "sum[()]")
for (i in seq_along(functions)) evalFormula <- gsub(functions[i],"",evalFormula)
resultEval <- grepl("^[0-9 c+^/*%() -- -]+$",evalFormula)
if (resultEval){
if (inputName == "") inputName = inputFormula
# change column names to column code to match formula syntax
transformedData <- inputData
colnames(transformedData) <- c(paste0("c",1:ncol(inputData)))
# change the formula
formulaIndexed <- gsub("c", "transformedData$c",inputFormula)
# apply formula to the data
resultData <- data.frame(eval(parse(text=formulaIndexed)))
# change the name of the result column
colnames(resultData) <- inputName
# add column to original file if asked
if (args[4] == TRUE) resultData <- data.frame(inputData, resultData)
# write output file
fwrite(resultData, file = "result.tabular", sep = "\t")
} else {
print("Formula not valid")
}
args[4]
# add column to original file if asked
if (TRUE == TRUE) resultData <- data.frame(inputData, resultData)
# write output file
fwrite(resultData, file = "result.tabular", sep = "\t")
list.files()
getwd()
resultData
fread("/home/simon/GitHub/BricksEtBrocks/activités/vne-activite29a(1)/vne_oiseauxvide.xlsx")
library(data.table)
fread("/home/simon/GitHub/BricksEtBrocks/activités/vne-activite29a(1)/vne_oiseauxvide.xlsx")
install.packages("xlsx")
library("xlsx")
install.packages("xlsx", dependencies = TRUE)
install.packages("openxlsx")
library("openxlsx")
read.xlsx("/home/simon/GitHub/BricksEtBrocks/activités/vne-activite29a(1)/vne_oiseauxvide.xlsx",
sheet = 1)
gat.wd()
get.wd()
getwd()
write.table(input, "input.tabular", row.names = FALSE, sep ="\t")
input <- read.xlsx("/home/simon/GitHub/BricksEtBrocks/activités/vne-activite29a(1)/vne_oiseauxvide.xlsx",
sheet = 1)
write.table(input, "input.tabular", row.names = FALSE, sep ="\t")
write.table(input, "input.tabular", row.names = FALSE, sep ="\t", quote = FALSE)
write.table(input, "oiseaux.tabular", row.names = FALSE, sep ="\t", quote = FALSE)
input <- read.xlsx("/home/simon/GitHub/BricksEtBrocks/activités/vne-activite29a(1)/vne_oiseauxvide.xlsx",
sheet = 2)
write.table(input, "temp.tabular", row.names = FALSE, sep ="\t", quote = FALSE)
convertfile <- function(file, sheetNb , newName){
library("openxlsx")
input <- read.xlsx(file,
sheet = nbSheet)
write.table(input,newName , row.names = FALSE, sep ="\t", quote = FALSE)
}
convertfile("/home/simon/GitHub/BricksEtBrocks/activités/vne-activite29a(1)/vne_oiseauxvide.xlsx",
sheetNb = 2,
newName = "temp1.tabular")
input <- read.xlsx(file,
sheet = sheetNb)
convertfile <- function(file, sheetNb , newName){
library("openxlsx")
input <- read.xlsx(file,
sheet = sheetNb)
write.table(input,newName , row.names = FALSE, sep ="\t", quote = FALSE)
}
convertfile("/home/simon/GitHub/BricksEtBrocks/activités/vne-activite29a(1)/vne_oiseauxvide.xlsx",
sheetNb = 2,
newName = "temp1.tabular")
head(input)
setwd("~/GitHub/BricksEtBrocks/dev")
runif(26,1,28)
round(runif(26,1,28))
paste(round(runif(26,1,28)))
# Example data
# --------------------
dataset1 = data.frame(PK = 1:26,
LETTERS = LETTERS,
other = paste(runif(1:28sample(c(",","/",":"))))
# reduce size
dataset1 <- dataset1[1:20, ]
dataset2 <- dataset2[c(1:4,12:26), ]
# write example data
write.table(dataset1, "input1-join.tabular", sep = "\t", row.names = FALSE)
write.table(dataset2, "input2-join.tabular", sep = "\t", row.names = FALSE)
sep = c(",","/",":")
sample(c(",","/",":")))
# Example data
# --------------------
dataset1 = data.frame(PK = 1:26,
LETTERS = LETTERS,
other = paste(runif(1:28sample(c(",","/",":"))))
# reduce size
dataset1 <- dataset1[1:20, ]
dataset2 <- dataset2[c(1:4,12:26), ]
# write example data
write.table(dataset1, "input1-join.tabular", sep = "\t", row.names = FALSE)
write.table(dataset2, "input2-join.tabular", sep = "\t", row.names = FALSE)
sep = c(",","/",":")
sample(c(",","/",":")))
# Example data
# --------------------
dataset1 = data.frame(PK = 1:26,
LETTERS = LETTERS,
other = paste(runif(1:28sample(c(",","/",":"))))
# reduce size
dataset1 <- dataset1[1:20, ]
dataset2 <- dataset2[c(1:4,12:26), ]
# write example data
write.table(dataset1, "input1-join.tabular", sep = "\t", row.names = FALSE)
write.table(dataset2, "input2-join.tabular", sep = "\t", row.names = FALSE)
sep = c(",","/ ",":")
sample(c(",","/",":")))
","
# Example data
# --------------------
dataset1 = data.frame(PK = 1:26,
LETTERS = LETTERS,
other = paste(runif(1:28sample(c(",","/",":"))))
# reduce size
dataset1 <- dataset1[1:20, ]
dataset2 <- dataset2[c(1:4,12:26), ]
# write example data
write.table(dataset1, "input1-join.tabular", sep = "\t", row.names = FALSE)
write.table(dataset2, "input2-join.tabular", sep = "\t", row.names = FALSE)
sep = c( "," ,"/ " ,":")
sample(c(",","/",":")))
# Example data
# --------------------
dataset1 = data.frame(PK = 1:26,
LETTERS = LETTERS,
other = paste(runif(1:28sample(c(",","/",":"))))
# reduce size
dataset1 <- dataset1[1:20, ]
dataset2 <- dataset2[c(1:4,12:26), ]
# write example data
write.table(dataset1, "input1-join.tabular", sep = "\t", row.names = FALSE)
write.table(dataset2, "input2-join.tabular", sep = "\t", row.names = FALSE)
sep = c(",")
sample(c(",","/",":")))
sep = c(",")
sep = c(",","/",":")
sep = c(",","/",":",".")
paste(round(runif(26,1,28)),sample(sep, size = 26))
paste(round(runif(26,1,28)),sample(sep, size = 26, replace = TRUE))
paste0(round(runif(26,1,28)),
sample(sep, size = 26, replace = TRUE),
round(runif(26,1,12)),
sample(sep, size = 26, replace = TRUE),
round(runif(26,1900,2020)))
# Example data
# --------------------
dataset = data.frame(PK = 1:26,
LETTERS = LETTERS,
other = paste0(round(runif(26,1,28)),
sample(sep, size = 26, replace = TRUE),
round(runif(26,1,12)),
sample(sep, size = 26, replace = TRUE),
round(runif(26,1900,2020))))
# Example data
# --------------------
dataset = data.frame(PK = 1:26,
LETTERS = LETTERS,
other = paste0(round(runif(26,1,28)),
sample(sep, size = 26, replace = TRUE),
round(runif(26,1,12)),
sample(sep, size = 26, replace = TRUE),
round(runif(26,1900,2020))))
# write example data
write.table(dataset, "input-lubridate.tabular", sep = "\t", row.names = FALSE)
